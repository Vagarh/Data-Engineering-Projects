
version: '3.8'

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_user:airflow_pass@postgres-db:5432/airflow_db
    - AIRFLOW__SCHEDULER__DAG_DIR_LISTING_INTERVAL=10
  volumes:
    - ./dags:/opt/airflow/dags
    - ./scripts:/opt/airflow/scripts
    - ./dbt_youtube:/opt/airflow/dbt_youtube
  depends_on:
    postgres-db:
      condition: service_healthy
    mc:
      condition: service_completed_successfully

services:
  postgres-db:
    image: postgres:13
    container_name: postgres-db
    environment:
      - POSTGRES_USER=airflow_user
      - POSTGRES_PASSWORD=airflow_pass
      - POSTGRES_DB=airflow_db
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./docker/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow_user"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9090"
    volumes:
      - minio-data-volume:/data
    ports:
      - "9000:9000"
      - "9090:9090"

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb myminio/raw-data;
      /usr/bin/mc policy set public myminio/raw-data;
      exit 0;
      "

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname User --role Admin --email admin@example.org"
    depends_on:
      postgres-db:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: airflow webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: airflow scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
  minio-data-volume:
